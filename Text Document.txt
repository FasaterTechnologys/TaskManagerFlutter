ТЗ на разработку таск-менеджера
Основной функционал:
Регистрация и авторизация:

Возможность регистрации новых пользователей с помощью email и пароля.
Авторизация через email и пароль.
Вход с использованием биометрии (FaceID, TouchID) для более продвинутой аутентификации.
Главный экран (список задач):

Список задач с возможностью фильтрации по дате, приоритету или категории.
Показ даты и времени выполнения задачи.
Возможность сортировки задач (по дате, приоритету и названию).
Поддержка категорий и тегов для задач (например, «Работа», «Личное», «Спорт»).
CRUD для задач (создание, редактирование, удаление):

Создание новой задачи с полями: название, описание, дата/время завершения, приоритет (низкий, средний, высокий), категория.
Редактирование и удаление задачи.
Пометка задачи как выполненной с возможностью возврата в список «незавершенных» задач.
Напоминания:

Возможность установки уведомлений для задач.
Интеграция с локальными уведомлениями устройства (push-уведомления).
Локальное хранение данных:

Локальное сохранение задач с использованием базы данных (например, SQLite или Hive).
Поддержка работы оффлайн (данные должны быть доступны без подключения к интернету).
Синхронизация с облаком:

Опциональная синхронизация данных с Firebase или другим облачным сервисом для сохранения задач в облаке.
Поддержка нескольких устройств: задачи синхронизируются между устройствами пользователя при входе в аккаунт.
Дополнительные функции (для улучшения проекта):
Тёмная тема: Возможность переключения между светлой и тёмной темами.
Панель статистики: Показ прогресса выполнения задач (сколько задач выполнено, сколько осталось).
Календарь: Встроенный календарь для просмотра задач по дням.
Поддержка многопользовательских проектов: Возможность делиться проектами с другими пользователями и совместно управлять задачами.
Интеграция с Google Calendar: Синхронизация задач с Google Calendar.
Анимации и плавные переходы между экранами: Для улучшения UX и профессионального внешнего вида приложения.
Технические требования:
Использование Flutter для фронтенда.
Поддержка платформ iOS и Android.
Локальное хранение данных с возможностью синхронизации с облаком.
Чистая архитектура (например, BLoC или Provider).
Тесты для основных бизнес-логик приложения.
Цели проекта:
Продемонстрировать навыки работы с Flutter, включая разработку UI, работу с базами данных и управление состоянием.
Показать умение реализовывать аутентификацию и работу с сетью.
Отобразить возможность работы с уведомлениями и асинхронными операциями.
Реализовать гибкую архитектуру, готовую к масштабированию.
Это задание позволяет продемонстрировать знания в работе с Flutter и базовыми технологиями, которые востребованы у junior-разработчиков.